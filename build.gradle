group = 'io.qameta.allure'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

gradlePlugin {
    plugins {
        allurePlugin {
            id = 'io.qameta.allure'
            implementationClass = 'io.qameta.allure.gradle.AllurePlugin'
        }
    }
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    junit5Plugin
}

dependencies {
    implementation localGroovy()

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation 'org.assertj:assertj-core:3.6.2'
    testImplementation 'org.apache.commons:commons-text:1.1'

    junit5Plugin 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    testRuntimeOnly files(testPluginClasspath(sourceSets.main.runtimeClasspath.files + configurations.junit5Plugin.files))
}

//quality {
//    pmdVersion = '5.5.4'
//    checkstyleVersion = '7.6'
//    findbugsVersion = '3.0.1'
//    codenarcVersion = '0.26.0'
//}

def testPluginClasspath(Collection<File> collections) {
    def generatedDir = new File(buildDir, "generated")
    def pluginsClasspathFile = new File(generatedDir, "plugin-classpath.txt")

    generatedDir.mkdirs()

    pluginsClasspathFile.text = collections.join("\n")
    return generatedDir
}
